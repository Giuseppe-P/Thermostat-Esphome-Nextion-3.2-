substitutions:
  devicename: termostato-nextion-climate
  friendly_name: Termostato Nextion Climate
  device_description: WEMOS Mini - Termostato Nextion riscaldamenti

esphome:
  name: ${devicename}
  comment: ${device_description}
  

esp8266:
  board: d1_mini
  #restore_from_flash: true

#preferences:
 #   flash_write_interval: 1min

web_server:
  port: 80

# Enable logging
logger:
  baud_rate: 0
  level: DEBUG
  logs:
    sensor: WARN
    resistance: WARN
    text_sensor: WARN
    ntc: WARN

# Enable Home Assistant API
api:
 reboot_timeout: 1200s

ota:

wifi:
  ssid: !secret wifi_ssid_fastweb
  password: !secret wifi_password_fastweb
  reboot_timeout: 900s

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Termostato-Test Fallback Hotspot"
    password: "eDqKg0LGbFM8"

captive_portal:


text_sensor:
# Riporta la versione di ESPHome con la data di compilazione
  - platform: version
    name: ESPHome Version ${friendly_name}

# Riporta informazioni dettagliate sul wifi, può essere commentato
  - platform: wifi_info
    ip_address:
      name: IP Address ${friendly_name}
     # Alcune informazioni Wi-Fi aggiuntive che normalmente non sono necessarie
     # ssid:
     # name: $ {friendly_name} SSID connesso
     # bssid:
     # name: $ {friendly_name} BSSID connesso

time:
  - platform: homeassistant
    id: homeassistant_time

sun:
  latitude: 40.3833897°
  longitude: 17.3334502°
  on_sunrise:
        then:
          - logger.log: Sun is above horizon!
  on_sunset:
        then:
          - logger.log: Sun is below horizon!

interval:
  - interval: 5s
    then:
     - if:
        condition:
          api.connected:
        then:
         lambda: |-
           id(server_HA)= 1;
        else:
         lambda: |-
           id(server_HA)= 0;


  - interval: 30s
    then:
     - if:
        condition:
          - sun.is_above_horizon:
        then:
          lambda: |-
            id(brightness) = 1.0;
        else:
          - if:
             condition:
               - sun.is_below_horizon:
             then:
              lambda: |-
                id(brightness) = 0.3;


switch:
  - platform: gpio
    name: "HEAT"
    id: "heating"
    pin: GPIO4 
    #restore_mode: RESTORE_DEFAULT_ON #Try to restore relay state after reboot/power-loss event.
     #RESTORE_DEFAULT_OFF (predefinito) - Tenta di ripristinare lo stato e l'impostazione predefinita è OFF se non è possibile ripristinare. Utilizza cicli di scrittura flash.
     #RESTORE_DEFAULT_ON - Tenta di ripristinare lo stato e l'impostazione predefinita su ON. Utilizza cicli di scrittura flash.
     #ALWAYS_OFF - Inizializza sempre il pin su OFF all'avvio. Non utilizza cicli di scrittura flash.
     #ALWAYS_ON - Inizializza sempre il pin come ON all'avvio. Non utilizza cicli di scrittura flash.

  - platform: gpio
    name: "Power MCZ"
    id: "power_system"
    pin: GPIO14
    #restore_mode: RESTORE_DEFAULT_ON #Try to restore relay state after reboot/power-loss event.
     #RESTORE_DEFAULT_OFF (predefinito) - Tenta di ripristinare lo stato e l'impostazione predefinita è OFF se non è possibile ripristinare. Utilizza cicli di scrittura flash.
     #RESTORE_DEFAULT_ON - Tenta di ripristinare lo stato e l'impostazione predefinita su ON. Utilizza cicli di scrittura flash.
     #ALWAYS_OFF - Inizializza sempre il pin su OFF all'avvio. Non utilizza cicli di scrittura flash.
     #ALWAYS_ON - Inizializza sempre il pin come ON all'avvio. Non utilizza cicli di scrittura flash.

  - platform: restart
    name: Restart ${device_description}

dallas:
  - pin: GPIO5
  #0x0E041623899DFF28

sensor:
  - platform: dallas
    address: 0x0E041623899DFF28
    name: ${friendly_name} Temperatura interna
    id: temp_dallas_1 
    filters:
      - calibrate_linear:
          # Map 0.0 (from sensor) to 0.0 (true value)
          - 0.0 -> 0.0
          - 10.0 -> 8.0

  # Segnala per quanto tempo il dispositivo è stato alimentato (in minuti)
  - platform: uptime
    name: Uptime ${friendly_name}
    filters:
      - lambda: return x / 60.0;
    unit_of_measurement: minutes
    
  - platform: wifi_signal
    name: WiFi Signal ${friendly_name}
    update_interval: 60s
    
  - platform: adc
    pin: VCC
    name: Voltage chip ${friendly_name}


climate:
  - platform: thermostat
    name: "Thermostat Climate Controller"
    id: my_climate
    sensor: temp_dallas_1
    min_heating_off_time: 6s
    min_heating_run_time: 6s
    min_idle_time: 6s
    off_mode:
      - switch.turn_off: power_system
    heat_mode:
      - switch.turn_on: power_system
    heat_action:
      - switch.turn_on: heating
    idle_action:
      - switch.turn_off: heating

uart:
  id: uart_hw
  rx_pin: GPIO03
  tx_pin: GPIO01
  baud_rate: 9600



binary_sensor:

  - platform: status
    name: Status ${friendly_name}
  
  - platform: nextion
    page_id: 0
    component_id: 5
    nextion_id: set_nextion
    name: "Turn Heater ON"
    internal: true
    on_press:
    - then:
       - climate.control:
           id: my_climate
           mode: HEAT
           target_temperature: 20°C

  - platform: nextion
    page_id: 0
    component_id: 4
    nextion_id: set_nextion
    name: "Turn Heater OFF"
    on_press:
    - then:
        lambda: |-
          auto call = id(my_climate).make_call();
          call.set_mode("OFF");
          // etc. see API reference
          call.perform();

  - platform: nextion
    page_id: 0
    component_id: 6
    nextion_id: set_nextion
    name: "set up"
    on_press:
    - then:
       - climate.control:
           id: my_climate
           target_temperature: !lambda return id(my_climate).target_temperature + 0.5;
     
  - platform: nextion
    page_id: 0
    component_id: 7
    nextion_id: set_nextion
    name: "set down"
    on_press:
    - then:
        - climate.control:
            id: my_climate
            #target_temperature_high: !lambda 'return id(my_climate).target_temperature_high - 1;'
            target_temperature: !lambda return id(my_climate).target_temperature - 0.5;

display:
  - platform: nextion
    id: set_nextion
    uart_id: uart_hw
    update_interval: 500ms   
    lambda: |-  
           //stampiamo le letture del setpoint sul display nextion
           if (id(my_climate).target_temperature != id(blocco_set)){
           it.set_component_text_printf("setpoint","%.1f",id(my_climate).target_temperature); //Set the sensor's temperature on the display
           id(blocco_set) = id(my_climate).target_temperature;
           }
           //stampiamo le letture del sensore temperatura sul display nextion         
           if (id(temp_dallas_1).state != id(temp_ds18b20_nextion)){
           it.set_component_text_printf("temp","%.1f",id(temp_dallas_1).state); //Set the sensor's temperature on the display
           id(temp_ds18b20_nextion) = id(temp_dallas_1).state;
           }

           if ((id(heating).state == true) && (id(power_system).state == true)){
            it.set_component_text_printf("stato","%s","Riscaldamento");
            it.send_command_printf  ("fiamma.picc=1");
            it.send_command_printf  ("b0.picc=0");
            it.send_command_printf  ("b1.picc=1");
           }
            if ((id(heating).state == false) && (id(power_system).state == true)){
            it.set_component_text_printf("stato","%s","Modulazione");
            it.send_command_printf  ("fiamma.picc=0");
            it.send_command_printf  ("b0.picc=0");
            it.send_command_printf  ("b1.picc=1");
           }
            if ((id(heating).state == false) && (id(power_system).state == false)){
            it.set_component_text_printf("stato","%s","Spento");
            it.send_command_printf  ("fiamma.picc=0");
            it.send_command_printf  ("b0.picc=1");
            it.send_command_printf  ("b1.picc=0");
           }

            if (id(server_HA) == 1){
            it.send_command_printf  ("server.picc=0");
           }
           if (id(server_HA) == 0){
            it.send_command_printf  ("server.picc=1");
           }

           it.set_backlight_brightness (id(brightness));

globals:
  
  - id: blocco_set             
    type: float
    initial_value: '0.0'
    restore_value: no

  - id: temp_ds18b20_nextion
    type: float
    initial_value: '0.0'
    restore_value: no

  - id: server_HA
    type: int
    initial_value: '0'
    restore_value: no
  
  - id: brightness
    type: float
    initial_value: '1.0'
    restore_value: no
    
